!function(e){var o={};function t(s){if(o[s])return o[s].exports;var n=o[s]={i:s,l:!1,exports:{}};return e[s].call(n.exports,n,n.exports,t),n.l=!0,n.exports}t.m=e,t.c=o,t.d=function(e,o,s){t.o(e,o)||Object.defineProperty(e,o,{enumerable:!0,get:s})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,o){if(1&o&&(e=t(e)),8&o)return e;if(4&o&&"object"==typeof e&&e&&e.__esModule)return e;var s=Object.create(null);if(t.r(s),Object.defineProperty(s,"default",{enumerable:!0,value:e}),2&o&&"string"!=typeof e)for(var n in e)t.d(s,n,function(o){return e[o]}.bind(null,n));return s},t.n=function(e){var o=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(o,"a",o),o},t.o=function(e,o){return Object.prototype.hasOwnProperty.call(e,o)},t.p="",t(t.s=6)}([function(e,o){e.exports=require("koa-router")},function(e,o,t){const s=t(4);e.exports={addShop:function(e,o){const t=process.env.APP_FREE_TRIAL_PERIOD;this.findShopByName(e).then(n=>{if(!n){n={shop_origin:e,access_token:o,notifications:'{"new_order":true,"cancelled_order":true,"paid_order":true,"fulfilled_order":true,"partially_fulfilled_order":true,"sales_report":false}',first_installed_time:s.getCurrentTimestamp(),trial_expiration_time:Math.floor((new Date).getTime()/1e3)+24*t*60*60};return new Promise((function(e,o){db.query("INSERT INTO shops SET ?",n,(function(t,s){return t?o(t):e(s)}))}))}this.updateShop(e,{access_token:o})})},findShopByName:function(e){return new Promise((function(o,t){db.query("SELECT * FROM shops WHERE shop_origin = ?",e,(function(e,s){return e?t(e):s.length>0?o(s[0]):o(null)}))}))},updateShop:function(e,o){return new Promise((function(t,s){db.query("UPDATE shops SET ? WHERE shop_origin = ?",[o,e],(function(e,o){return e?s(e):t(o)}))}))},updateSubscriptionStatus:function(e,o){this.updateShop(e,{subscription_status:o})},updateSubscription:function(e,o){return new Promise((function(t,s){db.query("UPDATE shops SET ? WHERE subscription_id = ?",[o,e],(function(e,o){return e?s(e):t(o)}))}))}}},function(e,o){e.exports=require("@shopify/koa-shopify-auth")},function(e,o){e.exports=require("@shopify/koa-shopify-graphql-proxy")},function(e,o){e.exports={getCurrentTimestamp:function(){const e=new Date;return`${e.getFullYear()}-${("0"+(e.getMonth()+1)).slice(-2)}-${("0"+e.getDate()).slice(-2)} ${("0"+e.getHours()).slice(-2)}:${("0"+e.getMinutes()).slice(-2)}:${("0"+e.getSeconds()).slice(-2)}`},getRemainingTime:function(e){const o=e-Math.floor((new Date).getTime()/1e3);return Math.ceil(o/86400)},isExpired:function(e){return Math.floor((new Date).getTime()/1e3)>e}}},function(e,o){e.exports={SUBSCRIPTION:{PLAN:{TRIAL:0,BASIC:1,PREMIUM:2},STATUS:{TRIAL:0,ACTIVE:1,CANCELLED:2,DECLINED:3,EXPIRED:4}},SLACK:{CONNECTED:1,DISCONNECTED:0},SETTING:{DISABLED:0,ENABLED:1,LOCKED:2},NOTIFICATION:{KEYS:["new_order","cancelled_order","paid_order","fulfilled_order","partially_fulfilled_order","sales_report"],NEW_ORDER:{TITLE:"New order notification",DESCRIPTION:"Automatically triggered when a new order is created. Includes order ID, customer's name and email, delivery location, cart total, discount code used (if any), tags (if any), UTM tracking (if any), and a link to access the order in Shopify."},CANCELLED_ORDER:{TITLE:"Cancelled order notification",DESCRIPTION:"Automatically triggered when an order is cancelled. Includes order ID, customer's name and email, delivery location, refunded amount, and a link to access the order in Shopify."},PAID_ORDER:{TITLE:"Paid order notification",DESCRIPTION:"Automatically triggered when an order's payment is completed. Includes order ID, customer's name and email, delivery location, cart total, and a link to access the order in Shopify."},FULFILLED_ORDER:{TITLE:"Fulfilled order notification",DESCRIPTION:"Automatically triggered when an order's payment is fulfilled. Includes order ID, customer's name and email, delivery location, cart total, and a link to access the order in Shopify."},PARTIALLY_FULFILLED_ORDER:{TITLE:"Partially fulfilled order notification",DESCRIPTION:"Automatically triggered when an order's payment is partially fulfilled. Includes order ID, customer's name and email, delivery location, cart total, and a link to access the order in Shopify."},SALES_REPORT:{TITLE:"Daily sales report",DESCRIPTION:"A daily summary of total revenue."}},TOAST:{HIDDEN:0,SHOW:1}}},function(e,o,t){t(7),t(8).config(),t(9);const s=t(10),n=t(11),r=t(12),{default:i}=t(2),{verifyRequest:a}=t(2),c=t(13),u=t(14),l=t(0),p=t(15),d=t(16),{default:f}=t(3),{ApiVersion:S}=t(3),{receiveWebhook:h,registerWebhook:E}=t(17);var T=r.createConnection({host:process.env.DB_HOST,user:process.env.DB_USER,password:process.env.DB_PASS,database:process.env.DB_NAME});T.connect((function(e){if(e)throw e;console.log("> Connected to mysql server")})),global.db=T;const I=parseInt(process.env.PORT,10)||3e3,y=n({dev:!1}),_=y.getRequestHandler(),{SHOPIFY_API_SECRET_KEY:m,SHOPIFY_API_KEY:P,HOST:b}=process.env;y.prepare().then(()=>{const e=new s;e.context.db=T,e.use(c({secure:!0,sameSite:"none"},e)),e.keys=[m],e.use(i({apiKey:P,secret:m,scopes:["read_orders","write_orders"],accessMode:"offline",async afterAuth(e){const{shop:o,accessToken:s}=e.session;e.cookies.set("shopOrigin",o,{httpOnly:!1,secure:!0,sameSite:"none"}),console.log(`> Authenticated: ${o} - ${s}`);const n=t(1);Promise.all([E({address:b+"/webhook/orders/create",topic:"ORDERS_CREATE",accessToken:s,shop:o,apiVersion:S.July20}),E({address:b+"/webhook/orders/cancelled",topic:"ORDERS_CANCELLED",accessToken:s,shop:o,apiVersion:S.July20}),E({address:b+"/webhook/orders/paid",topic:"ORDERS_PAID",accessToken:s,shop:o,apiVersion:S.July20}),E({address:b+"/webhook/orders/fulfilled",topic:"ORDERS_FULFILLED",accessToken:s,shop:o,apiVersion:S.July20}),E({address:b+"/webhook/orders/partially_fulfilled",topic:"ORDERS_PARTIALLY_FULFILLED",accessToken:s,shop:o,apiVersion:S.July20}),E({address:b+"/webhook/subscriptions/update",topic:"APP_SUBSCRIPTIONS_UPDATE",accessToken:s,shop:o,apiVersion:S.July20}),E({address:b+"/webhook/shop/update",topic:"SHOP_UPDATE",accessToken:s,shop:o,apiVersion:S.July20}),E({address:b+"/webhook/app/uninstalled",topic:"APP_UNINSTALLED",accessToken:s,shop:o,apiVersion:S.July20}),n.addShop(o,s)]).then(e=>{e[0].success&&e[1].success&&e[2].success&&e[3].success&&e[4].success&&e[5].success&&e[6].success&&e[7].success?console.log("> Webhook Registered: "+o):console.log("> Webhook registration failed: "+o)}),e.redirect("https://"+o+"/admin/apps/"+process.env.APP_NAME)}})),e.use(f({version:S.July20})),e.use(p("./public")),e.use(u());const o=new l,n=h({secret:m}),r=t(18)(n),y=t(19)(a);o.all("/(.*)",a(),async e=>{await _(e.req,e.res),e.respond=!1,e.res.statusCode=200}),e.use(r.routes()),e.use(r.allowedMethods()),e.use(d()),e.use(y.routes()),e.use(y.allowedMethods()),e.use(o.routes()),e.use(o.allowedMethods()),e.listen(I,()=>{console.log("> Server started on port: "+I)})})},function(e,o){e.exports=require("isomorphic-fetch")},function(e,o){e.exports=require("dotenv")},function(e,o){e.exports=require("module-alias/register")},function(e,o){e.exports=require("koa")},function(e,o){e.exports=require("next")},function(e,o){e.exports=require("mysql")},function(e,o){e.exports=require("koa-session")},function(e,o){e.exports=require("@koa/cors")},function(e,o){e.exports=require("koa-static")},function(e,o){e.exports=require("koa-body")},function(e,o){e.exports=require("@shopify/koa-shopify-webhooks")},function(e,o,t){const s=new(t(0))({prefix:"/webhook"}),n=t(1),r=t(5);e.exports=function(e){return s.post("/orders/create",e,async e=>{console.log("> New order created: ")}),s.post("/subscriptions/update",e,async e=>{e.body="ok";const o=e.request.body.app_subscription;if("ACTIVE"!=o.status&&"CANCELLED"!=o.status&&"EXPIRED"!=o.status)return;const t=o.admin_graphql_api_id.split("/")[4];let s=o.name;s=s.split(" ")[1];let i=r.SUBSCRIPTION.PLAN.BASIC;"premium"==s&&(i=r.SUBSCRIPTION.PLAN.PREMIUM);const a=r.SUBSCRIPTION.STATUS[o.status];n.updateSubscription(t,{subscription_plan:i,subscription_status:a}),console.log(`> Subscription updated: ${t} - ${s} - ${o.status}`)}),s.post("/app/uninstalled",e,async e=>{const o=e.request.body.myshopify_domain;n.updateSubscriptionStatus(o,r.SUBSCRIPTION.STATUS.CANCELLED),console.log("> App uninstalled: "+o)}),s.post("/shop/update",e,async e=>{if("cancelled"!=e.request.body.plan_name)return;const o=e.request.body.myshopify_domain;n.updateSubscriptionStatus(o,r.SUBSCRIPTION.STATUS.CANCELLED),console.log("> Shop plan cancelled: "+o)}),s}},function(e,o,t){const s=new(t(0)),n=t(20),r=t(1),i=t(4),a=t(5);e.exports=function(e){return s.get("/api/settings",e(),e=>{const o=e.session.shop;return new Promise((function(t,s){r.findShopByName(o).then(o=>{let s=!0,n=0,r=!1;o.subscription_plan!=a.SUBSCRIPTION.PLAN.TRIAL?(s=!1,r=o.subscription_status==a.SUBSCRIPTION.STATUS.ACTIVE):i.isExpired(o.trial_expiration_time)?s=!1:n=i.getRemainingTime(o.trial_expiration_time),e.body={trial:s,trialExpiration:n,paid:r,connected:!!o.is_slack_connected,plan:o.subscription_plan,settings:JSON.parse(o.notifications)},t()})}))}),s.post("/api/settings",e(),e=>{var o=e.request.body.settings;if(!o||Object.keys(o).length!=a.NOTIFICATION.KEYS.length)return console.log(Object.keys(o).length),console.log(a.NOTIFICATION.KEYS.length),void(e.body={result:"failed"});for(var t=0;t<a.NOTIFICATION.KEYS.length;t++){var s=a.NOTIFICATION.KEYS[t];if(!o.hasOwnProperty(s))return void(e.body={result:"failed"});o[s]?o[s]=!0:o[s]=!1}const n=e.session.shop;return new Promise((function(t,s){r.findShopByName(n).then(s=>{s.subscription_plan==a.SUBSCRIPTION.PLAN.PREMIUM&&s.subscription_status==a.SUBSCRIPTION.STATUS.ACTIVE||(o.sales_report=!1),r.updateShop(n,{notifications:JSON.stringify(o)}),e.body={result:"success"},t()})}))}),s.get("/test",e(),e=>{e.body={result:"success"}}),s.get("/api/subscription",e(),async e=>{const o=e.session.shop,t=await r.findShopByName(o),s=e.query.plan.toUpperCase();if(!a.SUBSCRIPTION.PLAN[s]||t.subscription_plan==a.SUBSCRIPTION.PLAN[s])return void e.redirect(`https://${o}/admin/apps/${process.env.APP_NAME}`);console.log(`> Chosen a plan: ${o} - ${s}`);var n=process.env.APP_BASIC_PLAN_FEE;"premium"==s&&(n=process.env.APP_PREMIUM_PLAN_FEE);const i=JSON.stringify({query:`mutation {\n        appSubscriptionCreate(\n          name: "Slackify ${s} plan fee"\n          returnUrl: "${process.env.HOST}/subscription/callback"\n          test: true\n          lineItems: [\n            {\n              plan: {\n                appRecurringPricingDetails: {\n                  price: { amount: ${n}, currencyCode: USD }\n                  interval: EVERY_30_DAYS\n                }\n              }\n            }\n          ]\n        ) {\n          userErrors {\n            field\n            message\n          }\n          confirmationUrl\n          appSubscription {\n            id\n          }\n        }\n      }`});return new Promise((function(s,n){fetch(`https://${o}/admin/api/2020-07/graphql.json`,{method:"POST",headers:{"Content-Type":"application/json","X-Shopify-Access-Token":t.access_token},body:i}).then(e=>e.json()).then(o=>{const t=o.data.appSubscriptionCreate.confirmationUrl;e.redirect(t),s()})}))}),s.get("/subscription/callback",e(),e=>{const o=e.session.shop,t=e.query.charge_id,s={subscription_id:t,subscription_status:a.SUBSCRIPTION.STATUS.ACTIVE,subscription_activated_time:i.getCurrentTimestamp()};r.updateShop(o,s),console.log(`> Subscription activated: ${o} - ${t}`),e.redirect(`https://${o}/admin/apps/${process.env.APP_NAME}/subscription`)}),s.get("/slack/oauth",e(),e=>{const o=e.session.shop;if(e.query.code)return new Promise((function(t,s){n({url:"https://slack.com/api/oauth.v2.access",qs:{code:e.query.code,client_id:process.env.SLACK_CLIENT_ID,client_secret:process.env.SLACK_CLIENT_SECRET},method:"GET"},(function(s,n,i){if(s)console.log("> Slack authentication error: "+s),e.response.status=500,e.response.body="Failed to add Slackify to a Slack channel.",t();else{const s=JSON.parse(i);s.ok?(r.updateShop(o,{slack_access:i,slack_webhook_url:s.incoming_webhook.url,is_slack_connected:a.SLACK.CONNECTED}),e.redirect(`https://${o}/admin/apps/${process.env.APP_NAME}`)):(console.log("> Slack authentication failed: "+s.error),e.response.status=500,e.response.body="Failed to add Slackify to the Slack channel."),t()}}))}));console.log("> Invalid slack authentication code: "+o),e.response.status=500,e.response.body="Invalid slack authentication code."}),s}},function(e,o){e.exports=require("request")}]);